{"version":3,"sources":["assets\\Script\\Leaderboard.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\ndeclare const firebase: any;\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n// Global variables for leaderboard data\r\nvar leaderboardList = [];\r\nvar sortedList;\r\nvar isLeaderboardReady = false;\r\n\r\n@ccclass\r\nexport default class Leaderboard extends cc.Component {\r\n\r\n    @property({ type: cc.AudioClip })\r\n    bgm: cc.AudioClip = null;\r\n\r\n    // Called when the component starts\r\n    start() {\r\n        this.resetLeaderboard();\r\n        cc.audioEngine.stopMusic();\r\n        this.loadLeaderboardData();\r\n        // Add event listener for quit button\r\n        cc.find(\"Canvas/quit\").on(cc.Node.EventType.MOUSE_DOWN, function () {\r\n            this.loadMenuScene();\r\n        }, this);\r\n    }\r\n\r\n    // Reset leaderboard data\r\n    resetLeaderboard() {\r\n        leaderboardList = [];\r\n        sortedList = null;\r\n        isLeaderboardReady = false;\r\n    }\r\n\r\n    // Update leaderboard display if data is ready\r\n    update(dt) {\r\n        if (isLeaderboardReady) {\r\n            this.updateLeaderboardDisplay();\r\n        }\r\n    }\r\n\r\n    // Play background music\r\n    playBGM() {\r\n        cc.audioEngine.playMusic(this.bgm, true);\r\n    }\r\n\r\n    // Load menu scene\r\n    private loadMenuScene() {\r\n        cc.director.loadScene(\"Scene000_StartScene\");\r\n    }\r\n\r\n    // Load leaderboard data from Firebase\r\n    private loadLeaderboardData() {\r\n        firebase.auth().onAuthStateChanged(function (user) {\r\n            var usersRef = firebase.database().ref(\"user_list/\");\r\n            usersRef.once('value').then(function (snapshot) {\r\n                leaderboardList = [];\r\n                snapshot.forEach(function (element) {\r\n                    leaderboardList.push({\r\n                        email: element.val().email || \"\",\r\n                        play_time: element.val().play_time || 0,\r\n                        death_count: element.val().death_count || 0\r\n                    });\r\n                });\r\n            }).then(function () {\r\n                sortedList = leaderboardList.sort(function (a, b) { return a.death_count - b.death_count; });\r\n            }).then(function () {\r\n                isLeaderboardReady = true;\r\n            });\r\n        });\r\n    }\r\n    \r\n\r\n    // Update leaderboard UI with sorted data\r\n    private updateLeaderboardDisplay() {\r\n        for (var i = 0; i < Math.min(sortedList.length, 5); i++) {\r\n            const basePath = \"Canvas/leaderboard_background/\" + (i + 1) + \"/\";\r\n            const emailNode = cc.find(basePath + \"email\");\r\n            const deathCountNode = cc.find(basePath + \"death_count\");\r\n    \r\n            if (!emailNode || !deathCountNode) {\r\n                cc.error(`找不到第${i+1}名的節點`);\r\n                continue;\r\n            }\r\n    \r\n            const emailLabel = emailNode.getComponent(cc.Label);\r\n            const deathCountLabel = deathCountNode.getComponent(cc.Label);\r\n\r\n            emailLabel.string = sortedList[i].email;\r\n            deathCountLabel.string = sortedList[i].death_count;\r\n        }\r\n    }\r\n}\r\n"]}